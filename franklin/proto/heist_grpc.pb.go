// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/heist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LesterService_ProposeHeistOffer_FullMethodName        = "/heist.LesterService/ProposeHeistOffer"
	LesterService_DecideOnOffer_FullMethodName            = "/heist.LesterService/DecideOnOffer"
	LesterService_ManageStarsNotifications_FullMethodName = "/heist.LesterService/ManageStarsNotifications"
)

// LesterServiceClient is the client API for LesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LesterServiceClient interface {
	ProposeHeistOffer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeistOffer, error)
	DecideOnOffer(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Empty, error)
	ManageStarsNotifications(ctx context.Context, in *NotificationCommand, opts ...grpc.CallOption) (*Empty, error)
}

type lesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLesterServiceClient(cc grpc.ClientConnInterface) LesterServiceClient {
	return &lesterServiceClient{cc}
}

func (c *lesterServiceClient) ProposeHeistOffer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeistOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeistOffer)
	err := c.cc.Invoke(ctx, LesterService_ProposeHeistOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) DecideOnOffer(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LesterService_DecideOnOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lesterServiceClient) ManageStarsNotifications(ctx context.Context, in *NotificationCommand, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LesterService_ManageStarsNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LesterServiceServer is the server API for LesterService service.
// All implementations must embed UnimplementedLesterServiceServer
// for forward compatibility.
type LesterServiceServer interface {
	ProposeHeistOffer(context.Context, *Empty) (*HeistOffer, error)
	DecideOnOffer(context.Context, *Decision) (*Empty, error)
	ManageStarsNotifications(context.Context, *NotificationCommand) (*Empty, error)
	mustEmbedUnimplementedLesterServiceServer()
}

// UnimplementedLesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLesterServiceServer struct{}

func (UnimplementedLesterServiceServer) ProposeHeistOffer(context.Context, *Empty) (*HeistOffer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeHeistOffer not implemented")
}
func (UnimplementedLesterServiceServer) DecideOnOffer(context.Context, *Decision) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideOnOffer not implemented")
}
func (UnimplementedLesterServiceServer) ManageStarsNotifications(context.Context, *NotificationCommand) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageStarsNotifications not implemented")
}
func (UnimplementedLesterServiceServer) mustEmbedUnimplementedLesterServiceServer() {}
func (UnimplementedLesterServiceServer) testEmbeddedByValue()                       {}

// UnsafeLesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LesterServiceServer will
// result in compilation errors.
type UnsafeLesterServiceServer interface {
	mustEmbedUnimplementedLesterServiceServer()
}

func RegisterLesterServiceServer(s grpc.ServiceRegistrar, srv LesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LesterService_ServiceDesc, srv)
}

func _LesterService_ProposeHeistOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).ProposeHeistOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_ProposeHeistOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).ProposeHeistOffer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_DecideOnOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).DecideOnOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_DecideOnOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).DecideOnOffer(ctx, req.(*Decision))
	}
	return interceptor(ctx, in, info, handler)
}

func _LesterService_ManageStarsNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LesterServiceServer).ManageStarsNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LesterService_ManageStarsNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LesterServiceServer).ManageStarsNotifications(ctx, req.(*NotificationCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// LesterService_ServiceDesc is the grpc.ServiceDesc for LesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.LesterService",
	HandlerType: (*LesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeHeistOffer",
			Handler:    _LesterService_ProposeHeistOffer_Handler,
		},
		{
			MethodName: "DecideOnOffer",
			Handler:    _LesterService_DecideOnOffer_Handler,
		},
		{
			MethodName: "ManageStarsNotifications",
			Handler:    _LesterService_ManageStarsNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/heist.proto",
}

const (
	OperatorService_StartDistraction_FullMethodName       = "/heist.OperatorService/StartDistraction"
	OperatorService_CheckDistractionStatus_FullMethodName = "/heist.OperatorService/CheckDistractionStatus"
	OperatorService_StartHit_FullMethodName               = "/heist.OperatorService/StartHit"
)

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorServiceClient interface {
	StartDistraction(ctx context.Context, in *DistractionDetails, opts ...grpc.CallOption) (*Empty, error)
	CheckDistractionStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PhaseStatus, error)
	StartHit(ctx context.Context, in *HitDetails, opts ...grpc.CallOption) (*Empty, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) StartDistraction(ctx context.Context, in *DistractionDetails, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OperatorService_StartDistraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) CheckDistractionStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PhaseStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhaseStatus)
	err := c.cc.Invoke(ctx, OperatorService_CheckDistractionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) StartHit(ctx context.Context, in *HitDetails, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OperatorService_StartHit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
// All implementations must embed UnimplementedOperatorServiceServer
// for forward compatibility.
type OperatorServiceServer interface {
	StartDistraction(context.Context, *DistractionDetails) (*Empty, error)
	CheckDistractionStatus(context.Context, *Empty) (*PhaseStatus, error)
	StartHit(context.Context, *HitDetails) (*Empty, error)
	mustEmbedUnimplementedOperatorServiceServer()
}

// UnimplementedOperatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperatorServiceServer struct{}

func (UnimplementedOperatorServiceServer) StartDistraction(context.Context, *DistractionDetails) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDistraction not implemented")
}
func (UnimplementedOperatorServiceServer) CheckDistractionStatus(context.Context, *Empty) (*PhaseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDistractionStatus not implemented")
}
func (UnimplementedOperatorServiceServer) StartHit(context.Context, *HitDetails) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHit not implemented")
}
func (UnimplementedOperatorServiceServer) mustEmbedUnimplementedOperatorServiceServer() {}
func (UnimplementedOperatorServiceServer) testEmbeddedByValue()                         {}

// UnsafeOperatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServiceServer will
// result in compilation errors.
type UnsafeOperatorServiceServer interface {
	mustEmbedUnimplementedOperatorServiceServer()
}

func RegisterOperatorServiceServer(s grpc.ServiceRegistrar, srv OperatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperatorService_ServiceDesc, srv)
}

func _OperatorService_StartDistraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistractionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).StartDistraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_StartDistraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).StartDistraction(ctx, req.(*DistractionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_CheckDistractionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).CheckDistractionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_CheckDistractionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).CheckDistractionStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_StartHit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).StartHit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_StartHit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).StartHit(ctx, req.(*HitDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorService_ServiceDesc is the grpc.ServiceDesc for OperatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDistraction",
			Handler:    _OperatorService_StartDistraction_Handler,
		},
		{
			MethodName: "CheckDistractionStatus",
			Handler:    _OperatorService_CheckDistractionStatus_Handler,
		},
		{
			MethodName: "StartHit",
			Handler:    _OperatorService_StartHit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/heist.proto",
}
